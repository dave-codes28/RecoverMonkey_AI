[
  {
    "id": 1,
    "title": "Design UI and Project Structure",
    "description": "Create the initial UI design and set up the project structure using Next.js, shadcn/ui, Tailwind, and V0.dev.",
    "status": "done",
    "priority": "high",
    "dependencies": [],
    "details": "Set up folders for dashboard, email editor, carts, assistant, settings. Prepare global styles and theme.",
    "testStrategy": "Verify folder structure and run the app with a basic landing page."
  },
  {
    "id": 2,
    "title": "Set Up Supabase Database Schema",
    "description": "Create tables for customers, carts, emails, email_templates, chat_logs, and store_settings in Supabase.",
    "status": "done",
    "priority": "high",
    "dependencies": [1],
    "details": "Define all required fields and relationships. Set up triggers for cart updates and status changes.",
    "testStrategy": "Check schema in Supabase dashboard and test with sample data."
  },
  {
    "id": 3,
    "title": "Integrate Shopify Webhooks",
    "description": "Connect Shopify store to backend using webhooks for cart updates and abandonment.",
    "status": "todo",
    "priority": "high",
    "dependencies": [2],
    "details": "Set up endpoints to receive and process webhook events. Store data in Supabase.",
    "testStrategy": "Simulate webhook events and verify data is stored correctly."
  },
  {
    "id": 4,
    "title": "Build Customer-Facing Chatbot Embed",
    "description": "Develop and embed the Replit AI chatbot on the Shopify checkout page.",
    "status": "todo",
    "priority": "high",
    "dependencies": [3],
    "details": "Script embed, intent detection, FAQ handling, trigger recovery, log actions to Supabase.",
    "testStrategy": "Test chatbot on a test Shopify store and verify logs in Supabase."
  },
  {
    "id": 5,
    "title": "Develop Shop Owner Dashboard",
    "description": "Create dashboard pages for overview, carts, email editor, AI assistant, and settings.",
    "status": "done",
    "priority": "high",
    "dependencies": [1,2],
    "details": "Use V0.dev, shadcn/ui, and Tailwind. Connect to Supabase for data.",
    "testStrategy": "Navigate all pages, check data loads, and UI responsiveness."
  },
  {
    "id": 6,
    "title": "Implement Email Automation Flow",
    "description": "Set up Supabase triggers to call Make.com webhook, which sends recovery emails via Brevo.",
    "status": "done",
    "priority": "high",
    "dependencies": [2,3],
    "details": "Webhook includes customer data and email HTML. Log email status in Supabase.",
    "testStrategy": "Trigger abandoned cart, check email sent, and log updated.",
    "subtasks": [
      {
        "id": "6.1",
        "title": "Create /app/api/email/send/route.ts API route",
        "description": "Build an API route that accepts a cart/customer ID, loads the cart/customer and default template, merges data into the template, sends the email payload to Make.com, and logs the send in the emails table.",
        "status": "done",
        "details": "- Accepts cart/customer ID as input\n- Loads cart/customer and default email template from Supabase\n- Merges cart/customer data into the template\n- Sends the resulting email payload to the Make.com webhook\n- Logs the email send in the emails table with status and metadata"
      }
    ]
  },
  {
    "id": 7,
    "title": "Build Email Template Editor",
    "description": "Allow shop owners to create and preview email templates in the dashboard.",
    "status": "done",
    "priority": "medium",
    "dependencies": [5,6],
    "details": "WYSIWYG editor, save templates to Supabase, preview with sample data.",
    "testStrategy": "Create, edit, and preview templates; verify saved in DB.",
    "subtasks": [
      {
        "id": "7.1",
        "title": "Implement backend API endpoints for saving, listing, and fetching default email templates",
        "status": "done"
      },
      {
        "id": "7.2",
        "title": "Connect frontend editor to backend API (save, load, set default)",
        "status": "done"
      },
      {
        "id": "7.3",
        "title": "Add UI feedback for loading, success, and error states",
        "status": "done"
      },
      {
        "id": "7.4",
        "title": "Allow setting a template as default from the UI",
        "status": "done"
      }
    ]
  },
  {
    "id": 8,
    "title": "Develop Shop Owner AI Assistant",
    "description": "Add a chatbot to the dashboard that answers store data questions using Supabase.",
    "status": "todo",
    "priority": "medium",
    "dependencies": [5],
    "details": "Integrate with GPT or similar, answer queries like 'How many carts were recovered today?'.",
    "testStrategy": "Ask sample questions and verify correct responses."
  },
  {
    "id": 9,
    "title": "Implement Analytics and Reporting",
    "description": "Show stats and KPIs on the dashboard overview page.",
    "status": "todo",
    "priority": "medium",
    "dependencies": [5],
    "details": "Display charts and tables for cart recovery, email performance, etc.",
    "testStrategy": "Verify analytics update with real data."
  },
  {
    "id": 10,
    "title": "Finalize Security, Auditing, and Mobile Responsiveness",
    "description": "Ensure secure API connections, log AI interactions, and make UI mobile-friendly.",
    "status": "todo",
    "priority": "high",
    "dependencies": [5,6,7,8,9],
    "details": "Implement authentication, audit logs, and responsive design.",
    "testStrategy": "Test on mobile, check logs, and run security checks."
  },
  {
    "id": 11,
    "title": "Implement SEO Analysis and Recommendations",
    "description": "Analyze Shopify product data for SEO improvements and provide actionable suggestions in the shop owner dashboard chatbot.",
    "status": "todo",
    "priority": "low",
    "dependencies": [8],
    "details": "Fetch product data from Shopify, analyze for SEO best practices (titles, descriptions, images, etc.), and surface recommendations in the dashboard chatbot.",
    "testStrategy": "Verify that the chatbot can provide SEO suggestions for products with missing or suboptimal SEO fields."
  },
  {
    "id": 12,
    "title": "Implement Supabase Auth and Multi-Tenancy",
    "description": "Set up Supabase Auth for user login/signup, replace hardcoded shop ID with dynamic user/shop context, create shop registration flow, and enable Row Level Security (RLS) for data isolation.",
    "status": "done",
    "priority": "high",
    "dependencies": [],
    "details": "This will unlock true multi-tenant support for the app and is the next major step after the email system.",
    "testStrategy": "Sign up as a new user, create a shop, and verify that all data is isolated per shop/user.",
    "subtasks": [
      {
        "id": "12.1",
        "title": "Set up Supabase Auth in the project and configure environment variables",
        "status": "done"
      },
      {
        "id": "12.2",
        "title": "Create user signup and login pages in the Next.js app",
        "status": "done"
      },
      {
        "id": "12.3",
        "title": "Update the database schema to support shops linked to users",
        "status": "done"
      },
      {
        "id": "12.4",
        "title": "Implement shop creation flow after signup",
        "status": "done"
      },
      {
        "id": "12.5",
        "title": "Replace hardcoded shop ID with dynamic user/shop context throughout the app",
        "status": "done"
      },
      {
        "id": "12.6",
        "title": "Enable Row Level Security (RLS) in Supabase for data isolation",
        "status": "done"
      },
      {
        "id": "12.7",
        "title": "Test multi-tenant flows: sign up, create shop, verify data isolation",
        "status": "done"
      }
    ]
  }
]   
 